{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Doxybook2 Example","text":"<p>This is a mainpage of Doxybook2 example output. This file is generated from <code>\\mainpage</code> command within Engine.hpp file.</p>"},{"location":"#images","title":"Images:","text":""},{"location":"#refs","title":"Refs:","text":"<ul> <li>Some texture class ref</li> <li>Some audio buffer class ref</li> </ul>"},{"location":"#simple-list","title":"Simple list:","text":"<ul> <li>list item 1<ul> <li>sub item 1<ul> <li>sub sub item 1 with italic</li> <li>sub sub item 2 with bold</li> </ul> </li> <li>sub item 2</li> </ul> </li> <li>list item 2<ul> <li>sub item 3<ul> <li>sub sub item 3 with ~~strike through~~</li> <li>sub sub item 4 with <code>monospaced</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"#enumerated-list","title":"Enumerated list:","text":"<ol> <li>list item 1<ul> <li>sub item 1<ul> <li>sub sub item 1 with italic</li> <li>sub sub item 2 with bold</li> </ul> </li> <li>sub item 2</li> </ul> </li> <li>list item 2<ul> <li>sub item 3<ul> <li>sub sub item 3 with ~~strike through~~</li> </ul> </li> </ul> </li> </ol>"},{"location":"#hyper-links","title":"Hyper links:","text":"<ul> <li>GitHub repository</li> </ul>"},{"location":"#code-blocks","title":"Code blocks:","text":"<pre><code>#include &lt;iostream&gt;\n\nint main(int argc, char** argv) {\n    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"#subpages","title":"Subpages:","text":"<p>This manual is divided in the following sections:</p> <ul> <li>Introduction</li> <li>Advanced usage</li> </ul>"},{"location":"#snippet","title":"Snippet:","text":"<pre><code>\n#include \"Engine.hpp\"\n\n// A dummy example \nint main() {\n    // Create pixels buffer\n    const auto pixels = std::make_unique&lt;uint8_t[]&gt;(new uint8_t[1024*1024*3]);\n    fillData(*pixels, \"path/to/texture.png\");\n\n    // Create a texture out of the pixels\n    Engine::Graphics::Texture2D texture(1024, 1024, *data);\n\n    // Done\n    return 0;\n}\n</code></pre> <p>Filename: example-1.cpp</p>"},{"location":"#table","title":"Table:","text":"First Header Second Header Third Header Content Cell Content Cell Content Cell with ref Engine::Audio::AudioBuffer Content Cell Content Cell Content Cell with link"},{"location":"#inline-formula","title":"Inline formula","text":"<p>Please see mkdocs-readthedocs example at https://matusnovak.github.io/doxybook2/mkdocs-readthedocs/ to see a working example using mkdocs + pymdownx.arithmatex</p> <p>The distance between ((x_1,y_1)) and ((x_2,y_2)) is (\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}).</p>"},{"location":"#block-formula","title":"Block formula","text":"<p>[ |I_2|=\\left| \\int_{0}^T \\psi(t) \\left{ u(a,t)- \\int_{\\gamma(t)}^a \\frac{d\\theta}{k(\\theta,t)} \\int_{a}^\\theta c(\\xi)u_t(\\xi,t)\\,d\\xi \\right} dt \\right| ]</p>"},{"location":"#blockquote","title":"Blockquote","text":"<p>This is some random blockquote! </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/","title":"Classes","text":"<ul> <li>namespace Engine This namespace contains all of the necessary engine components. <ul> <li>namespace Assets <ul> <li>class Asset <ul> <li>union Event <ul> <li>struct Loaded </li> <li>struct Unloaded </li> <li>struct Waiting </li> </ul> </li> </ul> </li> </ul> </li> <li>namespace Audio <ul> <li>class AudioBuffer A simple audio buffer to hold PCM samples<ul> <li>struct TypedAudioData Use this to populate the buffer. </li> </ul> </li> <li>class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. </li> </ul> </li> <li>class Exception </li> <li>namespace Graphics <ul> <li>class Framebuffer </li> <li>class Handle </li> <li>interface Texture This is a base texture class that serves as a base class for other texture types. </li> <li>class Texture2D </li> <li>class Texture3D Some deprecated class. </li> </ul> </li> <li>namespace Gui <ul> <li>class GuiWidget Some generic gui widget class. </li> </ul> </li> <li>namespace Utils <ul> <li>class ArrayView Filesystem path utility functions. </li> <li>namespace Path Filesystem path utility functions. </li> </ul> </li> </ul> </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/","title":"Engine::Assets::Asset","text":"<p>Module: An example game engine / Generic assets</p> <p><code>#include &lt;Asset.hpp&gt;</code></p>"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-classes","title":"Public Classes","text":"Name union Event"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-functions","title":"Public Functions","text":"Name Asset(const std::string &amp; name) virtual ~Asset() =0 virtual void load()Call this method to load the asset. virtual void unload()Call this method to unload the asset. const Event &amp; getEvent() constReturns the current status of the asset."},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-asset","title":"function Asset","text":"<pre><code>explicit Asset(\n    const std::string &amp; name\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-asset_1","title":"function ~Asset","text":"<pre><code>virtual ~Asset() =0\n</code></pre>"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-load","title":"function load","text":"<pre><code>virtual void load()\n</code></pre> <p>Call this method to load the asset. </p>"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-unload","title":"function unload","text":"<pre><code>virtual void unload()\n</code></pre> <p>Call this method to unload the asset. </p>"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-getevent","title":"function getEvent","text":"<pre><code>inline const Event &amp; getEvent() const\n</code></pre> <p>Returns the current status of the asset. </p> <p>Use this to determine the state, for example if the assets is being loaded or unloaded. </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/","title":"Engine::Audio::AudioBuffer","text":"<p>Module: An example game engine / Audio buffers and devices</p> <p>A simple audio buffer to hold PCM samples More...</p> <p><code>#include &lt;AudioBuffer.hpp&gt;</code></p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-classes","title":"Public Classes","text":"Name struct TypedAudioData Use this to populate the buffer."},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types","title":"Public Types","text":"Name enum class Type { UNKNOWN = 0, INT_8 = 1 &lt;&lt; 1, INT_16 = 1 &lt;&lt; 2, INT_24 = 1 &lt;&lt; 3, INT_32 = 1 &lt;&lt; 4, FLOAT_32 = 1 &lt;&lt; 5}Different type of audio formats. template &lt;typename T &gt; using Utils::ArrayView&lt; T &gt; AudioData typedef AudioData&lt; uint8_t &gt; AudioData8U"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions","title":"Public Functions","text":"Name AudioBuffer(const std::string &amp; filename)Constructor for Audio::AudioBuffer. virtual ~AudioBuffer() =defaultAudio::AudioBuffer destructor. void play(AudioManager &amp; manager) constPlay this buffer. void stop(AudioManager &amp; manager) constStop this buffer playing. void loop(AudioManager &amp; manager) constLoop this buffer forever. void setData(const TypedAudioData &amp; data) template &lt;size_t Size&gt; void setDataMultiple(const TypedAudioData data[Size]) void setData(const TypedAudioData data[], size_t size)Some deprecated function. void setCallback(Callback callback)Set the callback function. void setCallback2(Callback2 callback, void * user)Set the callback function."},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions","title":"Protected Functions","text":"Name float * getData()"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes","title":"Protected Attributes","text":"Name bool playing"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friends","title":"Friends","text":"Name class AudioManager void Audio::doSomething(AudioBuffer &amp; buffer)"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#detailed-description","title":"Detailed Description","text":"<pre><code>class Engine::Audio::AudioBuffer;\n</code></pre> <p>A simple audio buffer to hold PCM samples</p> <p>Author: Matus Novak </p> <p>Date: 2017-2019 </p> <p>Note: </p> <ul> <li>Some random note </li> <li>Some second random note </li> </ul> <p>Bug: Some random bug </p> <p>Some other random bug </p> <p>Test: Some random test description </p> <p>Todo: Some random todo </p> <p>Warning: Some random warning </p> <p>Precondition: First initialize the system. </p> <p>Lorem ipsum donor </p> <pre><code>// Some random code\nusing namespace Engine;\n\nAudio::AudioBuffer buffer(\"path/to/file.wav\");\nbuffer.play(audioManager);\n</code></pre> <p>More detailed description! </p> <pre><code>// Another code sample\n#include &lt;iostream&gt;\nusing namespace Engine;\nAudio::AudioBuffer buffer(\"path/to/file.wav\");\nstd::cout &lt;&lt; buffer.play(...) &lt;&lt; std::endl;\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#enum-type","title":"enum Type","text":"Enumerator Value Description UNKNOWN 0 Dont use this INT_8 1 &lt;&lt; 1 8-bit signed integer INT_16 1 &lt;&lt; 2 16-bit signed integer INT_24 1 &lt;&lt; 3 24-bit signed integer INT_32 1 &lt;&lt; 4 32-bit signed integer FLOAT_32 1 &lt;&lt; 5 32-bit float <p>Different type of audio formats. </p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#using-audiodata","title":"using AudioData","text":"<pre><code>template &lt;typename T &gt;\nusing Engine::Audio::AudioBuffer::AudioData =  Utils::ArrayView&lt;T&gt;;\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#typedef-audiodata8u","title":"typedef AudioData8U","text":"<pre><code>typedef AudioData&lt;uint8_t&gt; Engine::Audio::AudioBuffer::AudioData8U;\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer","title":"function AudioBuffer","text":"<pre><code>explicit AudioBuffer(\n    const std::string &amp; filename\n)\n</code></pre> <p>Constructor for Audio::AudioBuffer. </p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer_1","title":"function ~AudioBuffer","text":"<pre><code>virtual ~AudioBuffer() =default\n</code></pre> <p>Audio::AudioBuffer destructor. </p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-play","title":"function play","text":"<pre><code>void play(\n    AudioManager &amp; manager\n) const\n</code></pre> <p>Play this buffer. </p> <p>Parameters: </p> <ul> <li>manager Which manager to play the sound with </li> </ul> <p>Exceptions: </p> <ul> <li>Exception If this buffer is already playing </li> </ul>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-stop","title":"function stop","text":"<pre><code>void stop(\n    AudioManager &amp; manager\n) const\n</code></pre> <p>Stop this buffer playing. </p> <p>Parameters: </p> <ul> <li>manager Which manager to stop the sound with </li> </ul> <p>Exceptions: </p> <ul> <li>Exception If this buffer is already stopped </li> </ul>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-loop","title":"function loop","text":"<pre><code>void loop(\n    AudioManager &amp; manager\n) const\n</code></pre> <p>Loop this buffer forever. </p> <p>Parameters: </p> <ul> <li>manager Which manager to loop the sound with </li> </ul> <p>Exceptions: </p> <ul> <li>Exception If this buffer is already looping </li> </ul> <p>Note: This will loop forever until you call stop </p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdata","title":"function setData","text":"<pre><code>void setData(\n    const TypedAudioData &amp; data\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdatamultiple","title":"function setDataMultiple","text":"<pre><code>template &lt;size_t Size&gt;\ninline void setDataMultiple(\n    const TypedAudioData data[Size]\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdata_1","title":"function setData","text":"<pre><code>void setData(\n    const TypedAudioData data[],\n    size_t size\n)\n</code></pre> <p>Some deprecated function. </p> <p>Deprecated: </p> <p>Use the AudioBuffer::setDataMultiple instead </p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setcallback","title":"function setCallback","text":"<pre><code>void setCallback(\n    Callback callback\n)\n</code></pre> <p>Set the callback function. </p> <p>Parameters: </p> <ul> <li>callback The callback function pointer </li> </ul> <p>Deprecated: </p> <p>Use the AudioBuffer::setCallback2 instead </p> <p>See: Audio::Callback</p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setcallback2","title":"function setCallback2","text":"<pre><code>void setCallback2(\n    Callback2 callback,\n    void * user\n)\n</code></pre> <p>Set the callback function. </p> <p>Parameters: </p> <ul> <li>callback The callback function pointer </li> </ul> <p>See: Audio::Callback</p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-getdata","title":"function getData","text":"<pre><code>float * getData()\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#variable-playing","title":"variable playing","text":"<pre><code>bool playing {false};\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friends_1","title":"Friends","text":""},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiomanager","title":"friend AudioManager","text":"<pre><code>friend class AudioManager;\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiodosomething","title":"friend Audio::doSomething","text":"<pre><code>friend void Audio::doSomething(\n    AudioBuffer &amp; buffer\n);\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/","title":"Engine::Audio::AudioManager","text":"<p>Module: An example game engine / Audio buffers and devices</p> <p>An audio manager that accepts multiple Audio::AudioBuffer instances.  More...</p> <p><code>#include &lt;AudioManager.hpp&gt;</code></p>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#public-functions","title":"Public Functions","text":"Name AudioManager(int numOfChannels =128) ~AudioManager() void enque(const AudioBuffer &amp; buffer)"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#detailed-description","title":"Detailed Description","text":"<pre><code>class Engine::Audio::AudioManager;\n</code></pre> <p>An audio manager that accepts multiple Audio::AudioBuffer instances. </p> <p>See: Audio::AudioBuffer</p> <p>Lorem Ipsum Donor. Some Random link with bold and italics And the following is a <code>typewritter</code> font. And here is some list items:</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item with bold text</li> </ul> <p>Followed by some more text and another list:</p> <ul> <li>First item</li> <li>Second item</li> </ul>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager","title":"function AudioManager","text":"<pre><code>AudioManager(\n    int numOfChannels =128\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager_1","title":"function ~AudioManager","text":"<pre><code>~AudioManager()\n</code></pre>"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-enque","title":"function enque","text":"<pre><code>void enque(\n    const AudioBuffer &amp; buffer\n)\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Exception/","title":"Engine::Exception","text":"<p>Module: An example game engine</p> <p><code>#include &lt;Exception.hpp&gt;</code></p> <p>Inherits from exception</p>"},{"location":"Classes/classEngine_1_1Exception/#public-functions","title":"Public Functions","text":"Name Exception() =default Exception(std::string msg) const char * what() const override"},{"location":"Classes/classEngine_1_1Exception/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Exception/#function-exception","title":"function Exception","text":"<pre><code>Exception() =default\n</code></pre>"},{"location":"Classes/classEngine_1_1Exception/#function-exception_1","title":"function Exception","text":"<pre><code>inline explicit Exception(\n    std::string msg\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Exception/#function-what","title":"function what","text":"<pre><code>inline const char * what() const override\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/","title":"Engine::Graphics::Framebuffer","text":"<p>Module: An example game engine / Graphical related classes</p> <p><code>#include &lt;Framebuffer.hpp&gt;</code></p> <p>Inherits from Engine::Graphics::Texture, Engine::Graphics::Handle</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions","title":"Public Functions","text":"Name Framebuffer(int width, int height) virtual ~Framebuffer() virtual int getWidth() const overrideReturns the width of the texture in pixels. virtual int getHeight() const overrideReturns the height of the texture in pixels. virtual int getDepth() const overrideReturns the depth of the texture in pixels."},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Types inherited from Engine::Graphics::Texture</p> Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} <p>Public Functions inherited from Engine::Graphics::Texture</p> Name Texture(Type type) virtual ~Texture() =default bool isLoaded() const <p>Protected Attributes inherited from Engine::Graphics::Texture</p> Name bool loaded Type type <p>Public Functions inherited from Engine::Graphics::Handle</p> Name Handle() =default virtual ~Handle() =default int getHandle() const <p>Protected Attributes inherited from Engine::Graphics::Handle</p> Name int handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer","title":"function Framebuffer","text":"<pre><code>Framebuffer(\n    int width,\n    int height\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer_1","title":"function ~Framebuffer","text":"<pre><code>virtual ~Framebuffer()\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getwidth","title":"function getWidth","text":"<pre><code>virtual int getWidth() const override\n</code></pre> <p>Returns the width of the texture in pixels. </p> <p>Return: Width in pixels </p> <p>Reimplements: Engine::Graphics::Texture::getWidth</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getheight","title":"function getHeight","text":"<pre><code>virtual int getHeight() const override\n</code></pre> <p>Returns the height of the texture in pixels. </p> <p>Return: Height in pixels </p> <p>Reimplements: Engine::Graphics::Texture::getHeight</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getdepth","title":"function getDepth","text":"<pre><code>virtual int getDepth() const override\n</code></pre> <p>Returns the depth of the texture in pixels. </p> <p>Return: Depth in pixels </p> <p>Note: If this texture is 2D the depth is always 1 pixels </p> <p>Reimplements: Engine::Graphics::Texture::getDepth</p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/","title":"Engine::Graphics::Handle","text":"<p>Module: An example game engine / Graphical related classes</p> <p><code>#include &lt;Handle.hpp&gt;</code></p> <p>Inherited by Engine::Graphics::Texture</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#public-functions","title":"Public Functions","text":"Name Handle() =default virtual ~Handle() =default int getHandle() const"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes","title":"Protected Attributes","text":"Name int handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-handle","title":"function Handle","text":"<pre><code>Handle() =default\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-handle_1","title":"function ~Handle","text":"<pre><code>virtual ~Handle() =default\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-gethandle","title":"function getHandle","text":"<pre><code>inline int getHandle() const\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#variable-handle","title":"variable handle","text":"<pre><code>int handle;\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/","title":"Engine::Graphics::Texture","text":"<p>Module: An example game engine / Graphical related classes</p> <p>This is a base texture class that serves as a base class for other texture types.  More...</p> <p><code>#include &lt;Texture.hpp&gt;</code></p> <p>Inherits from Engine::Graphics::Handle</p> <p>Inherited by Engine::Graphics::Framebuffer, Engine::Graphics::Texture2D, Engine::Graphics::Texture3D</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-types","title":"Public Types","text":"Name enum class Type { UNKNOWN = 0, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32}"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-functions","title":"Public Functions","text":"Name Texture(Type type) virtual ~Texture() =default virtual int getWidth() const =0Returns the width of the texture in pixels. virtual int getHeight() const =0Returns the height of the texture in pixels. virtual int getDepth() const =0Returns the depth of the texture in pixels. bool isLoaded() const"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes","title":"Protected Attributes","text":"Name bool loaded Type type"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from Engine::Graphics::Handle</p> Name Handle() =default virtual ~Handle() =default int getHandle() const <p>Protected Attributes inherited from Engine::Graphics::Handle</p> Name int handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#detailed-description","title":"Detailed Description","text":"<pre><code>class Engine::Graphics::Texture;\n</code></pre> <p>This is a base texture class that serves as a base class for other texture types. </p> <p>Bug: This has some weird bug too! </p> <pre><code>\n#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include \"Engine.hpp\"\n\n// A dummy example \nint main() {\n    // Create pixels buffer\n    const auto pixels = std::make_unique&lt;uint8_t[]&gt;(new uint8_t[1024*1024*3]);\n    fillData(*pixels, \"path/to/texture.png\");\n\n    // Create a texture out of the pixels\n    Engine::Graphics::Texture2D texture(1024, 1024, *data);\n\n    // Done\n    return 0;\n}\n</code></pre> <p>Filename: example-1.cpp</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#enum-type","title":"enum Type","text":"Enumerator Value Description UNKNOWN 0 RGBA_8 RGB_8 RGBA_16 RGB_16 RGBA_32 RGB_32"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-texture","title":"function Texture","text":"<pre><code>explicit Texture(\n    Type type\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-texture_1","title":"function ~Texture","text":"<pre><code>virtual ~Texture() =default\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getwidth","title":"function getWidth","text":"<pre><code>virtual int getWidth() const =0\n</code></pre> <p>Returns the width of the texture in pixels. </p> <p>Return: Width in pixels </p> <p>Reimplemented by: Engine::Graphics::Framebuffer::getWidth, Engine::Graphics::Texture3D::getWidth, Engine::Graphics::Texture2D::getWidth</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getheight","title":"function getHeight","text":"<pre><code>virtual int getHeight() const =0\n</code></pre> <p>Returns the height of the texture in pixels. </p> <p>Return: Height in pixels </p> <p>Reimplemented by: Engine::Graphics::Framebuffer::getHeight, Engine::Graphics::Texture3D::getHeight, Engine::Graphics::Texture2D::getHeight</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getdepth","title":"function getDepth","text":"<pre><code>virtual int getDepth() const =0\n</code></pre> <p>Returns the depth of the texture in pixels. </p> <p>Return: Depth in pixels </p> <p>Note: If this texture is 2D the depth is always 1 pixels </p> <p>Reimplemented by: Engine::Graphics::Framebuffer::getDepth, Engine::Graphics::Texture3D::getDepth, Engine::Graphics::Texture2D::getDepth</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-isloaded","title":"function isLoaded","text":"<pre><code>inline bool isLoaded() const\n</code></pre> <p>Does some more things</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#variable-loaded","title":"variable loaded","text":"<pre><code>bool loaded {false};\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#variable-type","title":"variable type","text":"<pre><code>Type type;\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/","title":"Engine::Graphics::Texture2D","text":"<p>Module: An example game engine / Graphical related classes</p> <p><code>#include &lt;Texture2D.hpp&gt;</code></p> <p>Inherits from Engine::Graphics::Texture, Engine::Graphics::Handle</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions","title":"Public Functions","text":"Name Texture2D(int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8) virtual ~Texture2D() virtual int getWidth() const overrideReturns the width of the texture in pixels. virtual int getHeight() const overrideReturns the height of the texture in pixels. virtual int getDepth() const overrideReturns the depth of the texture in pixels."},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Types inherited from Engine::Graphics::Texture</p> Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} <p>Public Functions inherited from Engine::Graphics::Texture</p> Name Texture(Type type) virtual ~Texture() =default bool isLoaded() const <p>Protected Attributes inherited from Engine::Graphics::Texture</p> Name bool loaded Type type <p>Public Functions inherited from Engine::Graphics::Handle</p> Name Handle() =default virtual ~Handle() =default int getHandle() const <p>Protected Attributes inherited from Engine::Graphics::Handle</p> Name int handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d","title":"function Texture2D","text":"<pre><code>Texture2D(\n    int width,\n    int height,\n    uint8_t * data,\n    Texture::Type type =Texture::Type::RGBA8\n)\n</code></pre> <p>Parameters: </p> <ul> <li>data The pointer to the raw pixels data </li> <li>width The width of the image held by the data pointer </li> <li>height The height of the image held by the data pointer </li> <li>type What is the type of this pixels array? </li> </ul>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d_1","title":"function ~Texture2D","text":"<pre><code>virtual ~Texture2D()\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getwidth","title":"function getWidth","text":"<pre><code>virtual int getWidth() const override\n</code></pre> <p>Returns the width of the texture in pixels. </p> <p>Return: Width in pixels </p> <p>Reimplements: Engine::Graphics::Texture::getWidth</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getheight","title":"function getHeight","text":"<pre><code>virtual int getHeight() const override\n</code></pre> <p>Returns the height of the texture in pixels. </p> <p>Return: Height in pixels </p> <p>Reimplements: Engine::Graphics::Texture::getHeight</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getdepth","title":"function getDepth","text":"<pre><code>virtual int getDepth() const override\n</code></pre> <p>Returns the depth of the texture in pixels. </p> <p>Return: Depth in pixels </p> <p>Note: If this texture is 2D the depth is always 1 pixels </p> <p>Reimplements: Engine::Graphics::Texture::getDepth</p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/","title":"Engine::Graphics::Texture3D","text":"<p>Module: An example game engine / Graphical related classes</p> <p>Some deprecated class.  More...</p> <p><code>#include &lt;Texture3D.hpp&gt;</code></p> <p>Inherits from Engine::Graphics::Texture, Engine::Graphics::Handle</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions","title":"Public Functions","text":"Name Texture3D(int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8) virtual ~Texture3D() virtual int getWidth() const overrideReturns the width of the texture in pixels. virtual int getHeight() const overrideReturns the height of the texture in pixels. virtual int getDepth() const overrideReturns the depth of the texture in pixels."},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Types inherited from Engine::Graphics::Texture</p> Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} <p>Public Functions inherited from Engine::Graphics::Texture</p> Name Texture(Type type) virtual ~Texture() =default bool isLoaded() const <p>Protected Attributes inherited from Engine::Graphics::Texture</p> Name bool loaded Type type <p>Public Functions inherited from Engine::Graphics::Handle</p> Name Handle() =default virtual ~Handle() =default int getHandle() const <p>Protected Attributes inherited from Engine::Graphics::Handle</p> Name int handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#detailed-description","title":"Detailed Description","text":"<pre><code>class Engine::Graphics::Texture3D;\n</code></pre> <p>Some deprecated class. </p> <p>Deprecated: </p> <p>Don't use this texture type </p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d","title":"function Texture3D","text":"<pre><code>Texture3D(\n    int width,\n    int height,\n    int depth,\n    uint8_t * data,\n    Texture::Type type =Texture::Type::RGBA8\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d_1","title":"function ~Texture3D","text":"<pre><code>virtual ~Texture3D()\n</code></pre>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getwidth","title":"function getWidth","text":"<pre><code>virtual int getWidth() const override\n</code></pre> <p>Returns the width of the texture in pixels. </p> <p>Return: Width in pixels </p> <p>Reimplements: Engine::Graphics::Texture::getWidth</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getheight","title":"function getHeight","text":"<pre><code>virtual int getHeight() const override\n</code></pre> <p>Returns the height of the texture in pixels. </p> <p>Return: Height in pixels </p> <p>Reimplements: Engine::Graphics::Texture::getHeight</p>"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getdepth","title":"function getDepth","text":"<pre><code>virtual int getDepth() const override\n</code></pre> <p>Returns the depth of the texture in pixels. </p> <p>Return: Depth in pixels </p> <p>Note: If this texture is 2D the depth is always 1 pixels </p> <p>Reimplements: Engine::Graphics::Texture::getDepth</p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/","title":"Engine::Gui::GuiWidget","text":"<p>Module: An example game engine / Some gui related stuff and whatever</p> <p>Some generic gui widget class. </p> <p><code>#include &lt;GuiWidget.hpp&gt;</code></p>"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-slots","title":"Public Slots","text":"Name void mySlot(QObject * object, int a, bool b)"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-signals","title":"Public Signals","text":"Name void mySignal(QObject * object, int a, bool b)"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-functions","title":"Public Functions","text":"Name GuiWidget(QObject * parent) virtual ~GuiWidget() =default"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-slots-documentation","title":"Public Slots Documentation","text":""},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#slot-myslot","title":"slot mySlot","text":"<pre><code>void mySlot(\n    QObject * object,\n    int a,\n    bool b\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-signals-documentation","title":"Public Signals Documentation","text":""},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#signal-mysignal","title":"signal mySignal","text":"<pre><code>void mySignal(\n    QObject * object,\n    int a,\n    bool b\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#function-guiwidget","title":"function GuiWidget","text":"<pre><code>explicit GuiWidget(\n    QObject * parent\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#function-guiwidget_1","title":"function ~GuiWidget","text":"<pre><code>virtual ~GuiWidget() =default\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/","title":"Engine::Utils::ArrayView","text":"<p>Module: An example game engine / Some useful utilities</p> <p>Filesystem path utility functions.  More...</p> <p><code>#include &lt;ArrayView.hpp&gt;</code></p>"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#public-functions","title":"Public Functions","text":"Name ArrayView(const T * src, size_t len) virtual ~ArrayView() =default virtual const T * data() const virtual size_t size() const"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T  =uint8_t&gt;\nclass Engine::Utils::ArrayView;\n</code></pre> <p>Filesystem path utility functions. </p> <p>Template Parameters: </p> <ul> <li>T The type of the data, for example uint8_t </li> </ul>"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview","title":"function ArrayView","text":"<pre><code>ArrayView(\n    const T * src,\n    size_t len\n)\n</code></pre>"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview_1","title":"function ~ArrayView","text":"<pre><code>virtual ~ArrayView() =default\n</code></pre>"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-data","title":"function data","text":"<pre><code>virtual const T * data() const\n</code></pre>"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-size","title":"function size","text":"<pre><code>virtual size_t size() const\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/","title":"Engine::Assets::Asset::Event::Loaded","text":"<p><code>#include &lt;Asset.hpp&gt;</code></p>"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes","title":"Public Attributes","text":"Name bool success int usage"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-success","title":"variable success","text":"<pre><code>bool success;\n</code></pre>"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-usage","title":"variable usage","text":"<pre><code>int usage;\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/","title":"Engine::Assets::Asset::Event::Unloaded","text":"<p><code>#include &lt;Asset.hpp&gt;</code></p>"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes","title":"Public Attributes","text":"Name bool success"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#variable-success","title":"variable success","text":"<pre><code>bool success;\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/","title":"Engine::Assets::Asset::Event::Waiting","text":"<p><code>#include &lt;Asset.hpp&gt;</code></p>"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes","title":"Public Attributes","text":"Name Asset * other The pointer to the other asset this asset is waiting for."},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#variable-other","title":"variable other","text":"<pre><code>Asset * other;\n</code></pre> <p>The pointer to the other asset this asset is waiting for. </p> <p>Note: May be null </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/","title":"Engine::Audio::AudioBuffer::TypedAudioData","text":"<p>Use this to populate the buffer. </p> <p><code>#include &lt;AudioBuffer.hpp&gt;</code></p>"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes","title":"Public Attributes","text":"Name AudioData8U buffer Type type"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-buffer","title":"variable buffer","text":"<pre><code>AudioData8U buffer;\n</code></pre>"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-type","title":"variable type","text":"<pre><code>Type type;\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/","title":"Engine::Assets::Asset::Event","text":"<p>Module: An example game engine / Generic assets</p> <p><code>#include &lt;Asset.hpp&gt;</code></p>"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-classes","title":"Public Classes","text":"Name struct Loaded struct Unloaded struct Waiting"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes","title":"Public Attributes","text":"Name struct Engine::Assets::Asset::Event::Loaded loaded struct Engine::Assets::Asset::Event::Unloaded unloaded struct Engine::Assets::Asset::Event::Waiting waiting"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-loaded","title":"variable loaded","text":"<pre><code>struct Engine::Assets::Asset::Event::Loaded loaded;\n</code></pre>"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-unloaded","title":"variable unloaded","text":"<pre><code>struct Engine::Assets::Asset::Event::Unloaded unloaded;\n</code></pre>"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-waiting","title":"variable waiting","text":"<pre><code>struct Engine::Assets::Asset::Event::Waiting waiting;\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Examples/","title":"Examples","text":"<ul> <li>example example-1.cpp This is an example. </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Examples/example-1_8cpp-example/","title":"example-1.cpp","text":"<p>This is an example This is detailed docummentation ```cpp</p>"},{"location":"Examples/example-1_8cpp-example/#include","title":"include","text":""},{"location":"Examples/example-1_8cpp-example/#include_1","title":"include","text":""},{"location":"Examples/example-1_8cpp-example/#include-enginehpp","title":"include \"Engine.hpp\" <p>// A dummy example  int main() {     // Create pixels buffer     const auto pixels = std::make_unique(new uint8_t[102410243]);     fillData(*pixels, \"path/to/texture.png\"); <pre><code>// Create a texture out of the pixels\nEngine::Graphics::Texture2D texture(1024, 1024, *data);\n\n// Done\nreturn 0;\n</code></pre> <p>} ```</p> <p>Filename: example-1.cpp</p>  <p>Updated on 2025-09-24 at 00:18:47 +0000</p>","text":""},{"location":"Files/","title":"Files","text":"<ul> <li>dir src <ul> <li>file hpp </li> <li>file hpp </li> <li>dir src/Assets <ul> <li>file hpp </li> <li>file hpp </li> </ul> </li> <li>dir src/Audio <ul> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> </ul> </li> <li>dir src/Graphics <ul> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> </ul> </li> <li>dir src/Gui <ul> <li>file hpp </li> <li>file hpp </li> </ul> </li> <li>dir src/Utils <ul> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> <li>file hpp </li> </ul> </li> </ul> </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/ArrayView_8hpp/","title":"src/Utils/ArrayView.hpp","text":""},{"location":"Files/ArrayView_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Utils"},{"location":"Files/ArrayView_8hpp/#classes","title":"Classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions."},{"location":"Files/ArrayView_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\nnamespace Engine {\n    namespace Utils {\n        template&lt;typename T = uint8_t&gt;\n        class ArrayView {\n        public:\n            ArrayView(const T* src, size_t len);\n            virtual ~ArrayView() = default;\n\n            virtual const T* data() const;\n            virtual size_t size() const;\n        };\n    }\n}\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Asset_8hpp/","title":"src/Assets/Asset.hpp","text":""},{"location":"Files/Asset_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Assets"},{"location":"Files/Asset_8hpp/#classes","title":"Classes","text":"Name class Engine::Assets::Asset union Engine::Assets::Asset::Event struct Engine::Assets::Asset::Event::Loaded struct Engine::Assets::Asset::Event::Unloaded struct Engine::Assets::Asset::Event::Waiting"},{"location":"Files/Asset_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n#include &lt;queue&gt;\n#include &lt;string&gt;\n\nnamespace Engine {\n    namespace Assets {\n        class Asset {\n        public:\n            union Event {\n                struct Loaded {\n                    bool success;\n                    int usage;\n                } loaded;\n                struct Unloaded {\n                    bool success;\n                } unloaded;\n                struct Waiting {\n                    Asset* other;\n                } waiting;\n            };\n\n            explicit Asset(const std::string&amp; name);\n            virtual ~Asset() = 0;\n\n            virtual void load();\n            virtual void unload();\n            const Event&amp; getEvent() const {\n                return event;\n            }\n        private:\n            Event event;\n        };\n    }\n}\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Assets_8hpp/","title":"src/Assets/Assets.hpp","text":""},{"location":"Files/Assets_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#include \"AssetModel.hpp\"\n#include \"AssetManager.hpp\"\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/AudioBuffer_8hpp/","title":"src/Audio/AudioBuffer.hpp","text":""},{"location":"Files/AudioBuffer_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Audio"},{"location":"Files/AudioBuffer_8hpp/#classes","title":"Classes","text":"Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples struct Engine::Audio::AudioBuffer::TypedAudioData Use this to populate the buffer."},{"location":"Files/AudioBuffer_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n#include \"../Utils/ArrayView.hpp\"\n\nnamespace Engine {\n    namespace Audio {\n        class AudioManager;\n        class AudioBuffer;\n\n        typedef int (*Callback)(AudioBuffer&amp; buffer, size_t offset);\n\n        using Callback2 = int (*)(AudioBuffer&amp; buffer, size_t offset, void* user);\n\n        extern void doSomething(AudioBuffer&amp; buffer);\n\n        class AudioBuffer {\n        public:\n            enum class Type {\n                UNKNOWN = 0,\n                INT_8 = 1 &lt;&lt; 1,\n                INT_16 = 1 &lt;&lt; 2,\n                INT_24 = 1 &lt;&lt; 3,\n                INT_32 = 1 &lt;&lt; 4,\n                FLOAT_32 = 1 &lt;&lt; 5\n            };\n            template &lt;typename T&gt; using AudioData = Utils::ArrayView&lt;T&gt;;\n            typedef AudioData&lt;uint8_t&gt; AudioData8U;\n            struct TypedAudioData {\n                AudioData8U buffer;\n                Type type;\n            };\n            explicit AudioBuffer(const std::string&amp; filename);\n            virtual ~AudioBuffer() = default;\n            void play(AudioManager&amp; manager) const;\n            void stop(AudioManager&amp; manager) const;\n            void loop(AudioManager&amp; manager) const;\n            void setData(const TypedAudioData&amp; data);\n\n            template &lt;size_t Size&gt; void setDataMultiple(const TypedAudioData data[Size]) {\n            }\n\n            void setData(const TypedAudioData data[], size_t size);\n\n            friend class AudioManager;\n            friend void Audio::doSomething(AudioBuffer&amp; buffer);\n\n            void setCallback(Callback callback);\n\n            void setCallback2(Callback2 callback, void* user);\n\n        protected:\n            float* getData();\n            bool playing{false};\n        };\n    } // namespace Audio\n} // namespace Engine\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/AudioManager_8hpp/","title":"src/Audio/AudioManager.hpp","text":""},{"location":"Files/AudioManager_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Audio"},{"location":"Files/AudioManager_8hpp/#classes","title":"Classes","text":"Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances."},{"location":"Files/AudioManager_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#include \"AudioBuffer.hpp\"\n\nnamespace Engine {\n    namespace Audio {\n        class AudioManager final {\n          public:\n            AudioManager(int numOfChannels = 128);\n            ~AudioManager();\n\n            void enque(const AudioBuffer&amp; buffer);\n        };\n    } // namespace Audio\n} // namespace Engine\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Audio_8hpp/","title":"src/Audio/Audio.hpp","text":""},{"location":"Files/Audio_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#include \"AudioBuffer.hpp\"\n#include \"AudioManager.hpp\"\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Config_8hpp/","title":"src/Utils/Config.hpp","text":""},{"location":"Files/Config_8hpp/#defines","title":"Defines","text":"Name ENGINE_VERSION Autogenerated version string by CMake. ENGINE_ARCH"},{"location":"Files/Config_8hpp/#macros-documentation","title":"Macros Documentation","text":""},{"location":"Files/Config_8hpp/#define-engine_version","title":"define ENGINE_VERSION","text":"<pre><code>#define ENGINE_VERSION \"v1.0.1\"\n</code></pre> <p>Autogenerated version string by CMake. </p>"},{"location":"Files/Config_8hpp/#define-engine_arch","title":"define ENGINE_ARCH","text":"<pre><code>#define ENGINE_ARCH \"amd64\"\n</code></pre>"},{"location":"Files/Config_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#define ENGINE_VERSION \"v1.0.1\"\n#define ENGINE_ARCH \"amd64\"\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Engine_8hpp/","title":"src/Engine.hpp","text":""},{"location":"Files/Engine_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components."},{"location":"Files/Engine_8hpp/#functions","title":"Functions","text":"Name std::string someGlobalFunc()Some global extern function."},{"location":"Files/Engine_8hpp/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Files/Engine_8hpp/#function-someglobalfunc","title":"function someGlobalFunc","text":"<pre><code>std::string someGlobalFunc()\n</code></pre> <p>Some global extern function. </p>"},{"location":"Files/Engine_8hpp/#source-code","title":"Source code","text":"<pre><code>\n#include \"Assets/Assets.hpp\"\n#include \"Audio/Audio.hpp\"\n#include \"Exception.hpp\"\n#include \"Graphics/Graphics.hpp\"\n#include \"Gui/Gui.hpp\"\n#include \"Utils/Utils.hpp\"\n\nextern std::string someGlobalFunc();\n\nnamespace Engine {\n    extern std::string getVersion();\n} // namespace Engine\n\n//-----------------------------------------------------------\n\n//-----------------------------------------------------------\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Exception_8hpp/","title":"src/Exception.hpp","text":""},{"location":"Files/Exception_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components."},{"location":"Files/Exception_8hpp/#classes","title":"Classes","text":"Name class Engine::Exception"},{"location":"Files/Exception_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n#include &lt;exception&gt;\n#include &lt;string&gt;\n\nnamespace Engine {\n    class Exception: public std::exception {\n    public:\n        Exception() = default;\n\n        explicit Exception(std::string msg)\n            : msg(std::move(msg)) {\n\n        }\n\n        const char* what() const throw() override {\n            return msg.c_str();\n        }\n\n    private:\n        std::string msg;\n    };\n}\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Framebuffer_8hpp/","title":"src/Graphics/Framebuffer.hpp","text":""},{"location":"Files/Framebuffer_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics"},{"location":"Files/Framebuffer_8hpp/#classes","title":"Classes","text":"Name class Engine::Graphics::Framebuffer"},{"location":"Files/Framebuffer_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#include \"Texture.hpp\"\n\nnamespace Engine {\n    namespace Graphics {\n        class Framebuffer : public Texture {\n          public:\n            Framebuffer(int width, int height);\n            virtual ~Framebuffer();\n\n            int getWidth() const override;\n            int getHeight() const override;\n            int getDepth() const override;\n        };\n    } // namespace Graphics\n} // namespace Engine\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Graphics_8hpp/","title":"src/Graphics/Graphics.hpp","text":""},{"location":"Files/Graphics_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#include \"Framebuffer.hpp\"\n#include \"Handle.hpp\"\n#include \"Renderer.hpp\"\n#include \"Texture.hpp\"\n#include \"Texture2D.hpp\"\n#include \"Texture3D.hpp\"\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/GuiWidget_8hpp/","title":"src/Gui/GuiWidget.hpp","text":""},{"location":"Files/GuiWidget_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Gui"},{"location":"Files/GuiWidget_8hpp/#classes","title":"Classes","text":"Name class Engine::Gui::GuiWidget Some generic gui widget class."},{"location":"Files/GuiWidget_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\nclass QObject; // Forward definition\n\nnamespace Engine {\n    namespace Gui {\n        class GuiWidget {\n        public:\n            explicit GuiWidget(QObject* parent);\n            virtual ~GuiWidget() = default;\n\n        signals:\n            void mySignal(QObject* object, int a, bool b);\n\n        public slots:\n            void mySlot(QObject* object, int a, bool b);\n\n        private:\n            QObject* parent;\n        };\n    } // namespace Gui\n} // namespace Engine\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Gui_8hpp/","title":"src/Gui/Gui.hpp","text":""},{"location":"Files/Gui_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Handle_8hpp/","title":"src/Graphics/Handle.hpp","text":""},{"location":"Files/Handle_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics"},{"location":"Files/Handle_8hpp/#classes","title":"Classes","text":"Name class Engine::Graphics::Handle"},{"location":"Files/Handle_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\nnamespace Engine {\n    namespace Graphics {\n        class Handle {\n          public:\n            Handle() = default;\n            virtual ~Handle() = default;\n\n            int getHandle() const {\n                return handle;\n            }\n\n          protected:\n            // OpenGL handle\n            int handle;\n        };\n\n        inline int getHandle(Handle&amp; handle) {\n            return handle.getHandle();\n        }\n    } // namespace Graphics\n} // namespace Engine\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Log_8hpp/","title":"src/Utils/Log.hpp","text":""},{"location":"Files/Log_8hpp/#defines","title":"Defines","text":"Name LOG_DEBUG(MSG, ...)"},{"location":"Files/Log_8hpp/#macros-documentation","title":"Macros Documentation","text":""},{"location":"Files/Log_8hpp/#define-log_debug","title":"define LOG_DEBUG","text":"<pre><code>#define LOG_DEBUG(\n    MSG,\n    ...\n)\nprintf(MSG, ##__VA_ARGS__)\n</code></pre>"},{"location":"Files/Log_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n#include &lt;stdio.h&gt;\n\n#define LOG_DEBUG(MSG, ...) printf(MSG, ##__VA_ARGS__)\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Path_8hpp/","title":"src/Utils/Path.hpp","text":""},{"location":"Files/Path_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Utils Engine::Utils::Path Filesystem path utility functions."},{"location":"Files/Path_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n#include &lt;string&gt;\n\nnamespace Engine {\n    namespace Utils {\n        namespace Path {\n            std::string getFilename(const std::string&amp; path);\n            std::string getExtension(const std::string&amp; path);\n        }\n    }\n}\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Renderer_8hpp/","title":"src/Graphics/Renderer.hpp","text":""},{"location":"Files/Renderer_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Texture2D_8hpp/","title":"src/Graphics/Texture2D.hpp","text":""},{"location":"Files/Texture2D_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics"},{"location":"Files/Texture2D_8hpp/#classes","title":"Classes","text":"Name class Engine::Graphics::Texture2D"},{"location":"Files/Texture2D_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#include \"Texture.hpp\"\n\nnamespace Engine {\n    namespace Graphics {\n        class Texture2D : public Texture {\n          public:\n            Texture2D(int width, int height, uint8_t* data, Texture::Type type = Texture::Type::RGBA8);\n            virtual ~Texture2D();\n\n            int getWidth() const override;\n            int getHeight() const override;\n            int getDepth() const override;\n        };\n    } // namespace Graphics\n} // namespace Engine\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Texture3D_8hpp/","title":"src/Graphics/Texture3D.hpp","text":""},{"location":"Files/Texture3D_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics"},{"location":"Files/Texture3D_8hpp/#classes","title":"Classes","text":"Name class Engine::Graphics::Texture3D Some deprecated class."},{"location":"Files/Texture3D_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n#pragma once\n\n#include \"Texture.hpp\"\n\nnamespace Engine {\n    namespace Graphics {\n        class Texture3D : public Texture {\n          public:\n            Texture3D(int width, int height, int depth, uint8_t* data, Texture::Type type = Texture::Type::RGBA8);\n            virtual ~Texture3D();\n\n            int getWidth() const override;\n            int getHeight() const override;\n            int getDepth() const override;\n        };\n    } // namespace Graphics\n} // namespace Engine\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Texture_8hpp/","title":"src/Graphics/Texture.hpp","text":""},{"location":"Files/Texture_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics"},{"location":"Files/Texture_8hpp/#classes","title":"Classes","text":"Name interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types."},{"location":"Files/Texture_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#include \"Handle.hpp\"\n\nnamespace Engine {\n    namespace Graphics {\n        class Texture : protected Handle {\n          public:\n            enum class Type {\n                UNKNOWN = 0,\n                RGBA_8,\n                RGB_8,\n                RGBA_16,\n                RGB_16,\n                RGBA_32,\n                RGB_32\n            };\n\n            explicit Texture(Type type);\n            virtual ~Texture() = default;\n            virtual int getWidth() const = 0;\n            virtual int getHeight() const = 0;\n            virtual int getDepth() const = 0;\n            inline bool isLoaded() const {\n                return loaded;\n            }\n\n          protected:\n            bool loaded{false};\n            Type type;\n        };\n    } // namespace Graphics\n} // namespace Engine\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/Utils_8hpp/","title":"src/Utils/Utils.hpp","text":""},{"location":"Files/Utils_8hpp/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Utils"},{"location":"Files/Utils_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n\n#include \"Path.hpp\"\n#include \"ArrayView.hpp\"\n#include \"Config.hpp\"\n#include \"Log.hpp\"\n\nnamespace Engine {\n    namespace Utils {\n        inline void name_with_underscores(const std::string&amp; arg) {\n            (void)arg;\n        }\n    }\n}\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/dir_3419e189e460663ec2c964233bf8dcd6/","title":"src/Graphics","text":""},{"location":"Files/dir_3419e189e460663ec2c964233bf8dcd6/#files","title":"Files","text":"Name src/Graphics/Framebuffer.hpp src/Graphics/Graphics.hpp src/Graphics/Handle.hpp src/Graphics/Renderer.hpp src/Graphics/Texture.hpp src/Graphics/Texture2D.hpp src/Graphics/Texture3D.hpp <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/","title":"src","text":""},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#directories","title":"Directories","text":"Name src/Assets src/Audio src/Graphics src/Gui src/Utils"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","title":"Files","text":"Name src/Engine.hpp src/Exception.hpp <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/dir_a7363e98f9e0bdd87618633653859815/","title":"src/Utils","text":""},{"location":"Files/dir_a7363e98f9e0bdd87618633653859815/#files","title":"Files","text":"Name src/Utils/ArrayView.hpp src/Utils/Config.hpp src/Utils/Log.hpp src/Utils/Path.hpp src/Utils/Utils.hpp <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/","title":"src/Gui","text":""},{"location":"Files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/#files","title":"Files","text":"Name src/Gui/Gui.hpp src/Gui/GuiWidget.hpp <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/dir_c64386e93f356b78d4612c7b7741707c/","title":"src/Audio","text":""},{"location":"Files/dir_c64386e93f356b78d4612c7b7741707c/#files","title":"Files","text":"Name src/Audio/Audio.hpp src/Audio/AudioBuffer.hpp src/Audio/AudioManager.hpp <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Files/dir_e0c1ede47f21c4a643a1257f949f98e0/","title":"src/Assets","text":""},{"location":"Files/dir_e0c1ede47f21c4a643a1257f949f98e0/#files","title":"Files","text":"Name src/Assets/Asset.hpp src/Assets/Assets.hpp <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Modules/","title":"Modules","text":"<ul> <li>group An example game engine This is a brief description to the engine group. <ul> <li>group Generic assets This is a brief description to the assets group. </li> <li>group Audio buffers and devices This is a brief description to the audio group. </li> <li>group Graphical related classes This is a brief description to the graphics group. </li> <li>group Some gui related stuff and whatever This is a brief description to the gui group. </li> <li>group Some useful utilities This is a brief description to the utils group. </li> </ul> </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Modules/group__Assets/","title":"Generic assets","text":"<p>Module: An example game engine</p> <p>This is a brief description to the assets group.  More...</p>"},{"location":"Modules/group__Assets/#classes","title":"Classes","text":"Name union Engine::Assets::Asset::Event class Engine::Assets::Asset"},{"location":"Modules/group__Assets/#detailed-description","title":"Detailed Description","text":"<p>This is a brief description to the assets group. </p> <p>Some detailed description here </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Modules/group__Audio/","title":"Audio buffers and devices","text":"<p>Module: An example game engine</p> <p>This is a brief description to the audio group.  More...</p>"},{"location":"Modules/group__Audio/#classes","title":"Classes","text":"Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances."},{"location":"Modules/group__Audio/#detailed-description","title":"Detailed Description","text":"<p>This is a brief description to the audio group. </p> <p>Some detailed description here </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Modules/group__Engine/","title":"An example game engine","text":"<p>This is a brief description to the engine group.  More...</p>"},{"location":"Modules/group__Engine/#modules","title":"Modules","text":"Name Generic assets This is a brief description to the assets group. Audio buffers and devices This is a brief description to the audio group. Graphical related classes This is a brief description to the graphics group. Some gui related stuff and whatever This is a brief description to the gui group. Some useful utilities This is a brief description to the utils group."},{"location":"Modules/group__Engine/#namespaces","title":"Namespaces","text":"Name Engine This namespace contains all of the necessary engine components."},{"location":"Modules/group__Engine/#classes","title":"Classes","text":"Name class Engine::Exception"},{"location":"Modules/group__Engine/#functions","title":"Functions","text":"Name std::string getVersion()Returns the version string."},{"location":"Modules/group__Engine/#detailed-description","title":"Detailed Description","text":"<p>This is a brief description to the engine group. </p> <p>Some detailed description here </p>"},{"location":"Modules/group__Engine/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Modules/group__Engine/#function-getversion","title":"function getVersion","text":"<pre><code>std::string getVersion()\n</code></pre> <p>Returns the version string. </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Modules/group__Graphics/","title":"Graphical related classes","text":"<p>Module: An example game engine</p> <p>This is a brief description to the graphics group.  More...</p>"},{"location":"Modules/group__Graphics/#classes","title":"Classes","text":"Name class Engine::Graphics::Framebuffer class Engine::Graphics::Handle class Engine::Graphics::Texture2D class Engine::Graphics::Texture3D Some deprecated class. interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types."},{"location":"Modules/group__Graphics/#functions","title":"Functions","text":"Name int getHandle(Handle &amp; handle)Some namespace inline function."},{"location":"Modules/group__Graphics/#detailed-description","title":"Detailed Description","text":"<p>This is a brief description to the graphics group. </p> <p>Some detailed description here </p>"},{"location":"Modules/group__Graphics/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Modules/group__Graphics/#function-gethandle","title":"function getHandle","text":"<pre><code>inline int getHandle(\n    Handle &amp; handle\n)\n</code></pre> <p>Some namespace inline function. </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Modules/group__Gui/","title":"Some gui related stuff and whatever","text":"<p>Module: An example game engine</p> <p>This is a brief description to the gui group.  More...</p>"},{"location":"Modules/group__Gui/#classes","title":"Classes","text":"Name class Engine::Gui::GuiWidget Some generic gui widget class."},{"location":"Modules/group__Gui/#detailed-description","title":"Detailed Description","text":"<p>This is a brief description to the gui group. </p> <p>Some detailed description here </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Modules/group__Utils/","title":"Some useful utilities","text":"<p>Module: An example game engine</p> <p>This is a brief description to the utils group.  More...</p>"},{"location":"Modules/group__Utils/#namespaces","title":"Namespaces","text":"Name Engine::Utils::Path Filesystem path utility functions."},{"location":"Modules/group__Utils/#classes","title":"Classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions."},{"location":"Modules/group__Utils/#functions","title":"Functions","text":"Name void name_with_underscores(const std::string &amp; arg)"},{"location":"Modules/group__Utils/#defines","title":"Defines","text":"Name ENGINE_VERSION Autogenerated version string by CMake. LOG_DEBUG(MSG, ...)"},{"location":"Modules/group__Utils/#detailed-description","title":"Detailed Description","text":"<p>This is a brief description to the utils group. </p> <p>Some detailed description here </p>"},{"location":"Modules/group__Utils/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Modules/group__Utils/#function-name_with_underscores","title":"function name_with_underscores","text":"<pre><code>inline void name_with_underscores(\n    const std::string &amp; arg\n)\n</code></pre>"},{"location":"Modules/group__Utils/#macros-documentation","title":"Macros Documentation","text":""},{"location":"Modules/group__Utils/#define-engine_version","title":"define ENGINE_VERSION","text":"<pre><code>#define ENGINE_VERSION \"v1.0.1\"\n</code></pre> <p>Autogenerated version string by CMake. </p>"},{"location":"Modules/group__Utils/#define-log_debug","title":"define LOG_DEBUG","text":"<pre><code>#define LOG_DEBUG(\n    MSG,\n    ...\n)\nprintf(MSG, ##__VA_ARGS__)\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Namespaces/","title":"Namespaces","text":"<ul> <li>namespace Engine This namespace contains all of the necessary engine components. <ul> <li>namespace Assets </li> <li>namespace Audio </li> <li>namespace Graphics </li> <li>namespace Gui </li> <li>namespace Utils <ul> <li>namespace Path Filesystem path utility functions. </li> </ul> </li> </ul> </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Namespaces/namespaceEngine/","title":"Engine","text":"<p>Module: An example game engine</p> <p>This namespace contains all of the necessary engine components.  More...</p>"},{"location":"Namespaces/namespaceEngine/#namespaces","title":"Namespaces","text":"Name Engine::Assets Engine::Audio Engine::Graphics Engine::Gui Engine::Utils"},{"location":"Namespaces/namespaceEngine/#classes","title":"Classes","text":"Name class Engine::Exception"},{"location":"Namespaces/namespaceEngine/#functions","title":"Functions","text":"Name std::string getVersion()Returns the version string."},{"location":"Namespaces/namespaceEngine/#detailed-description","title":"Detailed Description","text":"<p>This namespace contains all of the necessary engine components. </p> <p>See: </p> <ul> <li>Engine::Assets</li> <li>Engine::Audio</li> <li>Engine::Graphics</li> <li>Engine::Utils</li> </ul>"},{"location":"Namespaces/namespaceEngine/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Namespaces/namespaceEngine/#function-getversion","title":"function getVersion","text":"<pre><code>std::string getVersion()\n</code></pre> <p>Returns the version string. </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Namespaces/namespaceEngine_1_1Assets/","title":"Engine::Assets","text":""},{"location":"Namespaces/namespaceEngine_1_1Assets/#classes","title":"Classes","text":"Name class Engine::Assets::Asset <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Namespaces/namespaceEngine_1_1Audio/","title":"Engine::Audio","text":""},{"location":"Namespaces/namespaceEngine_1_1Audio/#classes","title":"Classes","text":"Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances."},{"location":"Namespaces/namespaceEngine_1_1Audio/#types","title":"Types","text":"Name typedef int(*)(AudioBuffer &amp;buffer, size_t offset) Callback Some callback function pointer type definition. using int()(AudioBuffer &amp;buffer, size_t offset, void user) Callback2 Some callback function pointer type definition."},{"location":"Namespaces/namespaceEngine_1_1Audio/#functions","title":"Functions","text":"Name void doSomething(AudioBuffer &amp; buffer)Do something with the buffer."},{"location":"Namespaces/namespaceEngine_1_1Audio/#types-documentation","title":"Types Documentation","text":""},{"location":"Namespaces/namespaceEngine_1_1Audio/#typedef-callback","title":"typedef Callback","text":"<pre><code>typedef int(* Engine::Audio::Callback) (AudioBuffer &amp;buffer, size_t offset);\n</code></pre> <p>Some callback function pointer type definition. </p> <p>Parameters: </p> <ul> <li>buffer The buffer this callback is called from </li> <li>offset The offset of the buffer currently playing </li> </ul> <p>Deprecated: </p> <p>Use the Audio::Callback2 instead </p>"},{"location":"Namespaces/namespaceEngine_1_1Audio/#using-callback2","title":"using Callback2","text":"<pre><code>using Engine::Audio::Callback2 = typedef int (*)(AudioBuffer&amp; buffer, size_t offset, void* user);\n</code></pre> <p>Some callback function pointer type definition. </p> <p>Parameters: </p> <ul> <li>buffer The buffer this callback is called from </li> <li>offset The offset of the buffer currently playing </li> <li>user User specific data </li> </ul>"},{"location":"Namespaces/namespaceEngine_1_1Audio/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Namespaces/namespaceEngine_1_1Audio/#function-dosomething","title":"function doSomething","text":"<pre><code>void doSomething(\n    AudioBuffer &amp; buffer\n)\n</code></pre> <p>Do something with the buffer. </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Namespaces/namespaceEngine_1_1Graphics/","title":"Engine::Graphics","text":""},{"location":"Namespaces/namespaceEngine_1_1Graphics/#classes","title":"Classes","text":"Name class Engine::Graphics::Framebuffer class Engine::Graphics::Handle interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. class Engine::Graphics::Texture2D class Engine::Graphics::Texture3D Some deprecated class."},{"location":"Namespaces/namespaceEngine_1_1Graphics/#functions","title":"Functions","text":"Name int getHandle(Handle &amp; handle)Some namespace inline function."},{"location":"Namespaces/namespaceEngine_1_1Graphics/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Namespaces/namespaceEngine_1_1Graphics/#function-gethandle","title":"function getHandle","text":"<pre><code>inline int getHandle(\n    Handle &amp; handle\n)\n</code></pre> <p>Some namespace inline function. </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Namespaces/namespaceEngine_1_1Gui/","title":"Engine::Gui","text":""},{"location":"Namespaces/namespaceEngine_1_1Gui/#classes","title":"Classes","text":"Name class Engine::Gui::GuiWidget Some generic gui widget class. <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Namespaces/namespaceEngine_1_1Utils/","title":"Engine::Utils","text":""},{"location":"Namespaces/namespaceEngine_1_1Utils/#namespaces","title":"Namespaces","text":"Name Engine::Utils::Path Filesystem path utility functions."},{"location":"Namespaces/namespaceEngine_1_1Utils/#classes","title":"Classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions."},{"location":"Namespaces/namespaceEngine_1_1Utils/#functions","title":"Functions","text":"Name void name_with_underscores(const std::string &amp; arg)"},{"location":"Namespaces/namespaceEngine_1_1Utils/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Namespaces/namespaceEngine_1_1Utils/#function-name_with_underscores","title":"function name_with_underscores","text":"<pre><code>inline void name_with_underscores(\n    const std::string &amp; arg\n)\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/","title":"Engine::Utils::Path","text":"<p>Module: An example game engine / Some useful utilities</p> <p>Filesystem path utility functions. </p>"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#functions","title":"Functions","text":"Name std::string getFilename(const std::string &amp; path) std::string getExtension(const std::string &amp; path)"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#functions-documentation","title":"Functions Documentation","text":""},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getfilename","title":"function getFilename","text":"<pre><code>std::string getFilename(\n    const std::string &amp; path\n)\n</code></pre>"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getextension","title":"function getExtension","text":"<pre><code>std::string getExtension(\n    const std::string &amp; path\n)\n</code></pre> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Pages/","title":"Pages","text":"<ul> <li>page Advanced Usage </li> <li>page Bug List </li> <li>page Deprecated List </li> <li>page Doxybook2 Example </li> <li>page Introduction </li> <li>page Test List </li> <li>page Todo List </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Pages/advanced/","title":"Advanced Usage","text":"<p>This page is for advanced users. Make sure you have first read the introduction. </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Pages/bug/","title":"Bug List","text":"<p>Class Engine::Audio::AudioBuffer</p> <ul> <li>Some random bug  Some other random bug  </li> </ul> <p>Class Engine::Graphics::Texture</p> <ul> <li>This has some weird bug too! </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Pages/deprecated/","title":"Deprecated List","text":"<p>Member Engine::Audio::AudioBuffer::setCallback  (Callback callback)</p> <ul> <li>Use the AudioBuffer::setCallback2 instead  </li> </ul> <p>Member Engine::Audio::AudioBuffer::setData  (const TypedAudioData data[], size_t size)</p> <ul> <li>Use the AudioBuffer::setDataMultiple instead  </li> </ul> <p>Member Engine::Audio::Callback  )(AudioBuffer &amp;buffer, size_t offset)</p> <ul> <li>Use the Audio::Callback2 instead  </li> </ul> <p>Class Engine::Graphics::Texture3D</p> <ul> <li>Don't use this texture type </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Pages/intro/","title":"Introduction","text":"<p>This page introduces the user to the topic. Now you can proceed to the advanced section. </p> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Pages/test/","title":"Test List","text":"<p>Class Engine::Audio::AudioBuffer</p> <ul> <li>Some random test description </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"},{"location":"Pages/todo/","title":"Todo List","text":"<p>Class Engine::Audio::AudioBuffer</p> <ul> <li>Some random todo </li> </ul> <p>Updated on 2025-09-24 at 00:18:47 +0000</p>"}]}